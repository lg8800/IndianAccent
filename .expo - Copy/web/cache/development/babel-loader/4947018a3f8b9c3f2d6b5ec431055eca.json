{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\chhavi\\\\Documents\\\\oopsProject\\\\ReactNative\\\\confusion\\\\components\\\\FavoriteComponent.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { ListItem } from 'react-native-elements';\nimport { connect } from 'react-redux';\nimport { baseUrl } from \"../shared/baseUrl\";\nimport { Loading } from \"./LoadingComponent\";\nimport Swipeout from 'react-native-swipeout';\nimport { deleteFavorite as _deleteFavorite } from \"../redux/ActionCreators\";\nimport * as Animatable from 'react-native-animatable';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dishes: state.dishes,\n    favorites: state.favorites\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    deleteFavorite: function deleteFavorite(dishId) {\n      return dispatch(_deleteFavorite(dishId));\n    }\n  };\n};\n\nvar Favorites = function (_Component) {\n  _inherits(Favorites, _Component);\n\n  var _super = _createSuper(Favorites);\n\n  function Favorites() {\n    _classCallCheck(this, Favorites);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Favorites, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var navigate = this.props.navigation.navigate;\n\n      var renderMenuItem = function renderMenuItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        var rightButton = [{\n          text: 'Delete',\n          type: 'delete',\n          onPress: function onPress() {\n            Alert.alert('Delete Favorite', 'Are you sure you wish to delete the favorite dish ' + item.name + ' ?', [{\n              text: 'Cancel',\n              onPress: function onPress() {\n                return console.log(item.name + ' Not Deleted');\n              },\n              style: 'cancel'\n            }, {\n              text: 'OK',\n              onPress: function onPress() {\n                return _this.props.deleteFavorite(item.id);\n              }\n            }], {\n              cancelable: false\n            });\n          }\n        }];\n        return React.createElement(Swipeout, {\n          right: rightButton,\n          autoClose: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }\n        }, React.createElement(Animatable.View, {\n          animation: \"fadeInRightBig\",\n          duration: 2000,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }\n        }, React.createElement(ListItem, {\n          key: index,\n          title: item.name,\n          subtitle: item.description,\n          hideChevron: true,\n          onPress: function onPress() {\n            return navigate('Dishdetail', {\n              dishId: item.id\n            });\n          },\n          leftAvatar: {\n            source: {\n              uri: baseUrl + item.image\n            }\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }\n        })));\n      };\n\n      if (this.props.dishes.isLoading) {\n        return React.createElement(Loading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }\n        });\n      } else if (this.props.dishes.errMess) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }\n        }, this.props.dishes.errMess));\n      } else {\n        return React.createElement(FlatList, {\n          data: this.props.dishes.dishes.filter(function (dish) {\n            return _this.props.favorites.some(function (el) {\n              return el === dish.id;\n            });\n          }),\n          renderItem: renderMenuItem,\n          keyExtractor: function keyExtractor(item) {\n            return item.id.toString();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }\n        });\n      }\n    }\n  }]);\n\n  return Favorites;\n}(Component);\n\nFavorites.navigationOptions = {\n  title: 'My Favorites'\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);","map":{"version":3,"sources":["C:/Users/chhavi/Documents/oopsProject/ReactNative/confusion/components/FavoriteComponent.js"],"names":["React","Component","ListItem","connect","baseUrl","Loading","Swipeout","deleteFavorite","Animatable","mapStateToProps","state","dishes","favorites","mapDispatchToProps","dispatch","dishId","Favorites","navigate","props","navigation","renderMenuItem","item","index","rightButton","text","type","onPress","Alert","alert","name","console","log","style","id","cancelable","description","source","uri","image","isLoading","errMess","filter","dish","some","el","toString","navigationOptions","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, FlatList, Text, Alert } from 'react-native';\r\nimport { ListItem } from 'react-native-elements';\r\nimport { connect } from 'react-redux';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { Loading } from './LoadingComponent';\r\nimport Swipeout from 'react-native-swipeout';\r\nimport { deleteFavorite } from '../redux/ActionCreators';\r\nimport * as Animatable from 'react-native-animatable';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dishes: state.dishes,\r\n        favorites: state.favorites\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    deleteFavorite: (dishId) => dispatch(deleteFavorite(dishId))\r\n})\r\n\r\nclass Favorites extends Component {\r\n\r\n    static navigationOptions = {\r\n        title: 'My Favorites'\r\n    }\r\n\r\n    render() {\r\n        const { navigate } = this.props.navigation;\r\n\r\n        const renderMenuItem = ({ item, index }) => {\r\n            \r\n            const rightButton = [\r\n                {\r\n                    text: 'Delete', \r\n                    type: 'delete',\r\n                    onPress: () => {\r\n                        Alert.alert(\r\n                            'Delete Favorite',\r\n                            'Are you sure you wish to delete the favorite dish ' + item.name +' ?',\r\n                            [\r\n                                { \r\n                                    text: 'Cancel', \r\n                                    onPress: () => console.log(item.name + ' Not Deleted'),\r\n                                    style: 'cancel'\r\n                                },\r\n                                {\r\n                                    text: 'OK', \r\n                                    onPress: () => this.props.deleteFavorite(item.id),\r\n                                }\r\n                            ],\r\n                            { cancelable: false }\r\n                        );\r\n                    } \r\n                }\r\n            ];\r\n\r\n            return (\r\n                <Swipeout right={rightButton} autoClose={true}>\r\n                    <Animatable.View animation=\"fadeInRightBig\" duration={2000}>\r\n                    <ListItem\r\n                        key={index}\r\n                        title={item.name}\r\n                        subtitle={item.description}\r\n                        hideChevron={true}\r\n                        onPress={() => navigate('Dishdetail', { dishId: item.id })}\r\n                        leftAvatar={{ source: {uri: baseUrl + item.image}}}\r\n                        />\r\n                    </Animatable.View>\r\n                </Swipeout>\r\n            );\r\n        }\r\n\r\n        if(this.props.dishes.isLoading) {\r\n            return(\r\n                <Loading />\r\n            );\r\n        }\r\n        else if(this.props.dishes.errMess) {\r\n            return(\r\n                <View>\r\n                    <Text>{this.props.dishes.errMess}</Text>\r\n                </View>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <FlatList\r\n                    data={this.props.dishes.dishes.filter(dish => this.props.favorites.some(el => el === dish.id))}\r\n                    renderItem={renderMenuItem}\r\n                    keyExtractor={item => item.id.toString()}\r\n                    />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);"]},"metadata":{},"sourceType":"module"}