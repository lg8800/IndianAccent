{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\chhavi\\\\Documents\\\\oopsProject\\\\ReactNative\\\\confusion\\\\components\\\\MenuComponent.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Tile } from 'react-native-elements';\nimport { connect } from 'react-redux';\nimport { baseUrl } from \"../shared/baseUrl\";\nimport { Loading } from \"./LoadingComponent\";\nimport * as Animatable from 'react-native-animatable';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dishes: state.dishes\n  };\n};\n\nvar Menu = function (_Component) {\n  _inherits(Menu, _Component);\n\n  var _super = _createSuper(Menu);\n\n  function Menu() {\n    _classCallCheck(this, Menu);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Menu, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var renderMenuItem = function renderMenuItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        return React.createElement(Animatable.View, {\n          animation: \"fadeInRightBig\",\n          duration: 2000,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 17\n          }\n        }, React.createElement(Tile, {\n          key: index,\n          title: item.name,\n          caption: item.description,\n          featured: true,\n          onPress: function onPress() {\n            return navigate('Dishdetail', {\n              dishId: item.id\n            });\n          },\n          imageSrc: {\n            uri: baseUrl + item.image\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 21\n          }\n        }));\n      };\n\n      var navigate = this.props.navigation.navigate;\n\n      if (this.props.dishes.isLoading) {\n        return React.createElement(Loading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }\n        });\n      } else if (this.props.dishes.errMesss) {\n        return React.createElement(\"view\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }\n        }, this.props.dishes.errMesss));\n      } else {\n        return React.createElement(FlatList, {\n          data: this.props.dishes.dishes,\n          renderItem: renderMenuItem,\n          keyExtractor: function keyExtractor(item) {\n            return item.id.toString();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }\n        });\n      }\n    }\n  }]);\n\n  return Menu;\n}(Component);\n\nMenu.navigationOptions = {\n  title: 'Menu'\n};\nexport default connect(mapStateToProps)(Menu);","map":{"version":3,"sources":["C:/Users/chhavi/Documents/oopsProject/ReactNative/confusion/components/MenuComponent.js"],"names":["React","Component","Tile","connect","baseUrl","Loading","Animatable","mapStateToProps","state","dishes","Menu","renderMenuItem","item","index","name","description","navigate","dishId","id","uri","image","props","navigation","isLoading","errMesss","toString","navigationOptions","title"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT;AACA,SAASC,OAAT;AACA,OAAO,KAAKC,UAAZ,MAA4B,yBAA5B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHC,IAAAA,MAAM,EAAED,KAAK,CAACC;AADX,GAAP;AAGH,CAJD;;IAKMC,I;;;;;;;;;;;;;6BAMM;AAAA;;AAEJ,UAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAmB;AAAA,YAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,YAAXC,KAAW,QAAXA,KAAW;AACtC,eACI,oBAAC,UAAD,CAAY,IAAZ;AAAiB,UAAA,SAAS,EAAC,gBAA3B;AAA4C,UAAA,QAAQ,EAAE,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AACI,UAAA,GAAG,EAAEA,KADT;AAEI,UAAA,KAAK,EAAED,IAAI,CAACE,IAFhB;AAGI,UAAA,OAAO,EAAEF,IAAI,CAACG,WAHlB;AAII,UAAA,QAAQ,MAJZ;AAKI,UAAA,OAAO,EAAE;AAAA,mBAAMC,QAAQ,CAAC,YAAD,EAAe;AAAEC,cAAAA,MAAM,EAAEL,IAAI,CAACM;AAAf,aAAf,CAAd;AAAA,WALb;AAMI,UAAA,QAAQ,EAAE;AAAEC,YAAAA,GAAG,EAAEf,OAAO,GAAGQ,IAAI,CAACQ;AAAtB,WANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAYH,OAbD;;AAFI,UAiBIJ,QAjBJ,GAiBiB,KAAKK,KAAL,CAAWC,UAjB5B,CAiBIN,QAjBJ;;AAmBJ,UAAG,KAAKK,KAAL,CAAWZ,MAAX,CAAkBc,SAArB,EAAgC;AAC5B,eACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,OAJD,MAMK,IAAI,KAAKF,KAAL,CAAWZ,MAAX,CAAkBe,QAAtB,EAAgC;AACjC,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO,KAAKH,KAAL,CAAWZ,MAAX,CAAkBe,QAAzB,CADJ,CADJ;AAKH,OANI,MAQA;AACD,eACI,oBAAC,QAAD;AACI,UAAA,IAAI,EAAE,KAAKH,KAAL,CAAWZ,MAAX,CAAkBA,MAD5B;AAEI,UAAA,UAAU,EAAEE,cAFhB;AAGI,UAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,mBAAIA,IAAI,CAACM,EAAL,CAAQO,QAAR,EAAJ;AAAA,WAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;AACJ;;;;EAhDcxB,S;;AAAbS,I,CAEKgB,iB,GAAoB;AACvBC,EAAAA,KAAK,EAAE;AADgB,C;AAiD/B,eAAexB,OAAO,CAACI,eAAD,CAAP,CAAyBG,IAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, FlatList } from 'react-native';\r\nimport { Tile } from 'react-native-elements';\r\nimport { connect } from 'react-redux';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { Loading } from './LoadingComponent';\r\nimport * as Animatable from 'react-native-animatable';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dishes: state.dishes\r\n    }\r\n}\r\nclass Menu extends Component {\r\n\r\n    static navigationOptions = {\r\n        title: 'Menu'\r\n    };\r\n\r\n    render(){\r\n\r\n        const renderMenuItem = ({item, index}) => {\r\n            return (\r\n                <Animatable.View animation=\"fadeInRightBig\" duration={2000}>\r\n                    <Tile\r\n                        key={index}\r\n                        title={item.name}\r\n                        caption={item.description}\r\n                        featured\r\n                        onPress={() => navigate('Dishdetail', { dishId: item.id })}\r\n                        imageSrc={{ uri: baseUrl + item.image}}\r\n                      />\r\n                </Animatable.View>\r\n            );\r\n        };\r\n\r\n        const { navigate } = this.props.navigation;\r\n\r\n        if(this.props.dishes.isLoading) {\r\n            return(\r\n                <Loading />\r\n            );\r\n        }\r\n\r\n        else if (this.props.dishes.errMesss) {\r\n            return (\r\n                <view>\r\n                    <Text>{this.props.dishes.errMesss}</Text>\r\n                </view>\r\n            );\r\n        }\r\n\r\n        else {\r\n            return (\r\n                <FlatList \r\n                    data={this.props.dishes.dishes}\r\n                    renderItem={renderMenuItem}\r\n                    keyExtractor={item => item.id.toString()}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Menu);"]},"metadata":{},"sourceType":"module"}